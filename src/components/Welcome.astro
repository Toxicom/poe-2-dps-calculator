---
const inputs = [
  {
    label: "Physical Damage",
    min: "physical",
    max: "physical",
  },
  {
    label: "Attack Speed",
    min: "speed",
    max: null,
  },
  {
    label: "Lightning Damage",
    min: "lightning",
    max: "lightning",
  },
  {
    label: "Fire Damage",
    min: "fire",
    max: "fire",
  },
  {
    label: "Cold Damage",
    min: "cold",
    max: "cold",
  },
  {
    label: "Chaos Damage",
    min: "chaos",
    max: "chaos",
  },
];
---

<div id="container" class="bg-neutral-800 text-neutral-50 min-h-dvh">
  <main>
    <section id="hero" class="flex flex-col items-center justify-center p-8">
      <h1 class="font-black text-3xl mb-8">Path of Exile 2 DPS Calculator</h1>

      <div class="flex flex-col gap-4 w-full">
        <label for="itemInput"
          ><code>CTRL + C</code> on your item in-game and then <code
            >CTRL + V</code
          > into the text area below.</label
        >
        <textarea
          id="itemInput"
          rows="4"
          class="w-full p-4 bg-neutral-900/10 rounded"></textarea>
        <button id="parseButton" class="p-2 bg-blue-500 text-white rounded"
          >Parse Stats</button
        >
      </div>

      <div class="flex gap-8">
        <div class="flex flex-col gap-4">
          {
            inputs.map(({ label, min, max }) => {
              return (
                <div class="flex flex-col items-end">
                  <label class="text-bold text-lg mb-1 mt-2">{label}</label>
                  <div class="flex gap-4">
                    <input class="ml-auto" name={`${min}Min`} type="number" />
                    {max && <input name={`${max}Max`} type="number" />}
                  </div>
                </div>
              );
            })
          }
        </div>

        <div class="bg-blue-500/10 mt-4 p-8 rounded md:min-w-80">
          {inputs.map(({ min }) => <p id={`${min}DPS`} class="dps-output" />)}
          <p id="elementalDPS" class="dps-output mt-2"></p>
          <p id="totalDPS" class="dps-output"></p>
        </div>
      </div>
    </section>
  </main>
  <footer class="bg-neutral-800 text-neutral-50 text-center mt-auto p-8">
    Created by <a href="https://github.com/Toxicom">Toxi</a>. Source code on <a
      href="https://github.com/Toxicom/poe-2-dps-calc">GitHub</a
    >.
  </footer>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const inputs = document.querySelectorAll<HTMLInputElement>("input");

    const getInputValue = (name: string) =>
      parseFloat(
        document.querySelector<HTMLInputElement>(`input[name='${name}']`)
          ?.value || "0"
      );

    const updateLabel = (id: string, text: string) => {
      const label = document.querySelector(`#${id}`);
      if (label) label.textContent = text;
    };

    const calculateDPS = () => {
      const damageTypes = ["physical", "lightning", "fire", "cold", "chaos"];
      let totalDPS = 0;
      let elementalDPS = 0;

      const atkSpeed = getInputValue("speedMin");
      if (atkSpeed <= 0) {
        updateLabel("totalDPS", "Total DPS: Enter Attack Speed");
        return;
      }

      damageTypes.forEach((type) => {
        const min = getInputValue(`${type}Min`);
        const max = getInputValue(`${type}Max`);

        const dps = ((min + max) / 2) * atkSpeed;

        totalDPS += dps;

        if (["fire", "cold", "lightning"].includes(type)) {
          elementalDPS += dps;
        }

        updateLabel(
          `${type}DPS`,
          `${type.charAt(0).toUpperCase() + type.slice(1)} DPS: ${dps.toFixed(2)}`
        );
      });

      updateLabel("totalDPS", `Total DPS: ${totalDPS.toFixed(2)}`);
      updateLabel("elementalDPS", `Elemental DPS: ${elementalDPS.toFixed(2)}`);
    };

    inputs.forEach((input) => {
      input.addEventListener("input", calculateDPS);
    });

    calculateDPS();

    // Parsing Functionality
    const parseButton = document.querySelector("#parseButton");
    if (!parseButton) return;

    parseButton.addEventListener("click", () => {
      const textarea =
        document.querySelector<HTMLTextAreaElement>("#itemInput");
      if (!textarea) return;

      const content = textarea.value;

      const statsRegex = /Physical Damage: (\d+)-(\d+)/;
      const speedRegex = /Attacks per Second: (\d+\.\d+)/;

      const physicalMatch = statsRegex.exec(content);
      const speedMatch = speedRegex.exec(content);

      if (physicalMatch) {
        const min = parseInt(physicalMatch[1], 10);
        const max = parseInt(physicalMatch[2], 10);

        const minInput = document.querySelector<HTMLInputElement>(
          "input[name='physicalMin']"
        );
        const maxInput = document.querySelector<HTMLInputElement>(
          "input[name='physicalMax']"
        );

        if (minInput) {
          minInput.value = min.toString();
        }

        if (maxInput) {
          maxInput.value = max.toString();
        }
      }

      if (speedMatch) {
        const speed = parseFloat(speedMatch[1]);
        const speedInput = document.querySelector<HTMLInputElement>(
          "input[name='speedMin']"
        );

        if (speedInput) {
          speedInput.value = speed.toString();
        }
      }

      calculateDPS();
    });
  });
</script>

<style>
  input {
    @apply py-2 px-4 rounded text-neutral-900;
  }

  a {
    @apply transition underline text-blue-500 hover:no-underline hover:text-blue-400;
  }

  #container {
    font-family: Inter, Roboto, "Helvetica Neue", "Arial Nova", "Nimbus Sans",
      Arial, sans-serif;
  }

  main {
    height: 100%;
    display: flex;
    justify-content: center;
  }
</style>
